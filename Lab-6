#Train a Deep Belief Network (DBN) using RBMs.
# Fine-tune with supervised learning.
# Evaluate performance on a benchmark dataset.

import numpy as np
from sklearn.neural_network import BernoulliRBM
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from tensorflow.keras.datasets import mnist

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess the data
x_train = x_train.reshape(len(x_train), 784)
x_test = x_test.reshape(len(x_test), 784)
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.

# Split data into training and testing sets
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=42)


# Create and train the DBN (using RBM for feature extraction)
rbm = BernoulliRBM(random_state=0, verbose=True, n_components=200, n_iter=20) # Adjust parameters as needed
logistic = LogisticRegression(solver='lbfgs', max_iter=1000)

dbn = Pipeline(steps=[('rbm', rbm), ('logistic', logistic)])

# Train the DBN
dbn.fit(x_train, y_train)

# Evaluate the DBN
accuracy = dbn.score(x_val, y_val)  # Use validation set for evaluation
print(f"DBN Classification Accuracy (Validation Set): {accuracy}")

# Evaluate on the test set (unseen data)
test_accuracy = dbn.score(x_test, y_test)
print(f"DBN Classification Accuracy (Test Set): {test_accuracy}")
